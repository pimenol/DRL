import sys
from pathlib import Path
sys.path.append(str(Path(__file__).resolve().parents[2]))

import pickle as pkl
import numpy as np
from environment.PendulumEnv import PendulumEnv

GT = pkl.loads(
    b"""\x80\x04\x95J\x01\x00\x00\x00\x00\x00\x00\x8c\x15numpy.core.multiarray\x94\x8c\x0c_reconstruct\x94\x93\x94\x8c\x05numpy\x94\x8c\x07ndarray\x94\x93\x94K\x00\x85\x94C\x01b\x94\x87\x94R\x94(K\x01K\x0cK\x04\x86\x94h\x03\x8c\x05dtype\x94\x93\x94\x8c\x02f4\x94\x89\x88\x87\x94R\x94(K\x03\x8c\x01<\x94NNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00t\x94b\x89C\xc0O\x9e}\xbf\x8d\r\xf5?\x82t\x85\xc0\x88\xf2\x86\xc0\x19\x06 \xbf[\xb3=B\xaf\xc7 \xc0\x94Y\xc8?{OA\xbf\xd3\xeb\xdb\xc1\xfaC\xd0\xbfs\xbc\xd9\xbf\xed\x90\x98\xbet\x0f\xe7AA\x12\xac?a\xe2\xd4\xc0F\xb5\xbf>vC\xbdA(\xaf\xcb>\xe1D\x00@\x9f\x112\xbf\xb6\xe75\xc1\x1fFy@Q\xfbV@\xc9\x0bP\xbf\xb6\xea\xacA\xd0;\x89\xc0\xd4\x19\xb4\xc1\x10\xebU?\xcc\x1f7A\x8d'\x93?b>\xfe\xc0\x9a\x19\xbb>\x88\xdbP\xc2\xb0\xe3\xbc\xbfm\xac\xb5?\x97L\xdb><a\xa0\xc1z\xff9\xbeCH\x9e\xc1Y\xff&\xbe\xe0o\xd8\xbfB\x92s?\xabYDA\x8d\xacq\xbe\xf0M\xd2A\xa9%\xfc\xc0\xc6c\xe4\xc0\x94t\x94b.""")


def test_pendulum():
    np.random.seed(0)
    cfg = {"N": 12, "vis": True}
    env = PendulumEnv(cfg)
    time = 512
    s = env.vector_reset()
    for i in range(time):
        actions = np.random.rand(cfg['N'], 1) * 2 - 1  # random actions sampled from [-1, 1]
        s, r = env.vector_step(actions)
    env.close()
    assert np.allclose(np.array(s), GT, atol=1e-4), "Env produced wrong state"


if __name__ == '__main__':
    assert test_pendulum(), "Pendulum test failed"
