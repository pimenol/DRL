import sys
from pathlib import Path
sys.path.append(str(Path(__file__).resolve().parents[2]))

import pickle as pkl
import numpy as np
from environment.WalkerEnv import WalkerEnv


GT = pkl.loads(
    b"""\x80\x04\x95\xfd\x05\x00\x00\x00\x00\x00\x00\x8c\x15numpy.core.multiarray\x94\x8c\x0c_reconstruct\x94\x93\x94\x8c\x05numpy\x94\x8c\x07ndarray\x94\x93\x94K\x00\x85\x94C\x01b\x94\x87\x94R\x94(K\x01K\x0cK\x1d\x86\x94h\x03\x8c\x05dtype\x94\x93\x94\x8c\x02f4\x94\x89\x88\x87\x94R\x94(K\x03\x8c\x01<\x94NNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00t\x94b\x89Bp\x05\x00\x00\x0c\xa1\xda>\xb4]\xe1\xbe\xcfN\xd0=\xc5a\x9d;\xbb\x81\x0c\xbdY\xb9\x7f?\x970\xfd<\x91\'\xac\xbe\xee\x1ct>\xf58\xfe\xbe\xc7,p>\x84\xf1+\xbf\x91\xa0\x0f\xbf\xc4\xd6\x94\xbe\x02\x1e\x1f\xbfjO\xf0\xbd\x83\x18b=\x9aH\xaf=\xbe\x91\xce={D\xc2\xbd\xce\xdcf\xbd\x89\xb4g\xc1\xe7\n\xcf\xc0eq\xbf\xc0\xeam\x9a@q`\xe3@\x0e\x08\xd7@gX:\xbf\xcc\'\xbe\xbfE"B\xbf\x9c\x12\xb7\xbe\xfa\'\xcc=\xaa\x19\xd4\xba\xb8\x7f"?\xd0\xcfE\xbf]\xe0);;\x85\x0f\xbf\xc8\xf3B>\xb4\x15\r?\xf1\xd8\xb8\xbe1>&?\x92\xecN?\x90\xb6\x04?d\x05y\xbf\xa3~\x99=\x8c\x04\xaa\xbbk:.\xbd\x19zv\xbf\xf6\xda\x8a>\xbd:\x91\xbe<\xdc\xdf@\x96N\xba@.7A\xbf\xb2\xc6\x1f@\x9b\xb5\x93\xc0*\x82h@\xc6f\x1d?\x1d\xdb\x92@K}7\xbe\x0f\xdfT>\xb6(\xdb=\x1ar\x04\xbe)a{\xbfE\x01\x08\xbeo]\x19\xbd\x19\xd3P\xbe\xeb\x1f\x8e?\x08\x19\x9a\xbe\x04\xa5|\xbe_\xfc#?.r\x0b\xbf]\x87\xfb\xbec\r\xa3\xbeI<\x10?\x02\xeb\xc6\xbe\xb5\xe7c>\xa6#+?\t\x1f\x84?\xaaO\x18@I(p\xc0\xb9~i@\xde\x9df\xc1\xc09\xfa\xbfW\xe4\x81@\xc3\x8c{\xc0\xec\x17\x99@+\xb3\xda\xc0\xe2d\x07\xbeV\xe8\xa7\xbe\xb2\x83\xce=\x00\x14M\xbd\x82S\xdc\xbe\x86We?\x18\x16\xca=\xf7\x07\xd8>\xdc\x15\x03?[K\x10\xbf\x1fg4?\xc3\xde\x83>M\xbap>-\x15\x17\xbf*s\xdb\xbe\x8b\xe9\x1f>b3\x9c\xbb]\x87\xc3=N\x0e~\xbf\xe2\xa9\x93>5\xf1\xe8=\xf5x\xde\xc0\xcf\x1a\tA%\x00j?i\xab\xb4\xbf^\x13.\xc1\x04\xb7\xd8?\xa5(:\xbf!\xbb\x01\xc1\x83\x9cp>\x0f\x04\x15\xbfm&\xcd=\x00\x8e\xff;\xf3\xd7*?9\xa1>\xbf\xb7\xec\x0b\xbc\x81\x11#\xbf\x8d\xe1S?\xa3\x88\x97>)%\x81\xbfp*\x08?B\xa6~\xbf.\x11\xdd\xbd\xa1\x83\x9e>\xcbH">\xb2X\xa2\xbc\xe7\x01\xc1\xbbX\x12U\xbf\xaa\xb5\xe0=\xcc\x1a\xfe>\x1c\xca\xc4@9\x89?\xbf\xb4\x1do?&=M?\x05\xe9\xd5\xc0\x94y\\@c\x146\xc1I\x18\xb4\xc0\x8e\x14\x04\xbe\xe0;=\xbf\xe9>\xcb=\xa6\xdc\xca=>\x1bY?\xf0\\\x04\xbf\x15\xbdv\xbdq"\xb7>>\xbbA?\xa9\x1c\xe1=^N\x87\xbd\xb8\x9f\xfd=\x9f\x13\x0f\xbdH\x19\x05\xbfC\xaa\xe0>\xa9d\xf6=\xb6\xb1\x04=i<\x8f<\x8e\xe3\x9b\xbf\x1a^(=VU4\xbeg\xdd\x03A\xb8\x07g\xc0\x91\xc3\xa1@\xf0\x03\x11A\xc9\x0b\xe6@\x8d\xdc\x1c\xc1\xfa\xd1\'\xc0\xd7u\t?\x12~\x9b>\x81\x0c\x11?\x11d\xc9=\x01\x8c\x0c\xbd0y/\xbfi\xfa9?\xfc&\x0f=g\x16\xff\xbeT;\x83?O<\x01?\x06\x88%>\xfa\xb2\xcb\xbe\xe13"\xbf? \xb4>\xb5\x15\x83\xbf"\x81\x82\xbd\x12\x19\xb1\xbb\x94\x91\xf2\xbc\x1bH\xea=}y6>\xa6\n\x19\xbe\xde\xfeT@n\xcfU\xbe\x9b\xa5S\xbf\xf9\xf5\xc8?\xb0\xc8\x81?\x9d\xady\xc0\x97\xe2<\xbf+T\xa8\xc0nC+>\xcf$C?\x8d_\xd1=\x1c\xef\x07\xbdZd\xaf>U\xa4o?\xde\x96\x94\xbd\xc84\xe4\xbe4\x1bW?Z\xb0\x18\xbfZ\xb9\x9d\xbd:\x8c\xa3>W\xa2\xc9\xbd\xcc3\xcc>\x94\xabe?t\xf4\xc7=\n\xc3o=\x15M\xb8\xbbKi|?ox\xef\xbd\xc8\xe0w>\xff+L\xbfiin\xbfZ)\xf1@\xffO\x97\xc0\xdd>\xf9\xc0\xc0\xe9\xaf@6\xde\x1b\xc1\x84&\x87\xc0\xf3\xb5h?\x07\x9d\x03\xbfH)\xca=\x84X\xb9;\xc4\xdc\x0f?\xb5\xbeS?\x90\xd0\xa1;\\\xb1>\xbe\x869\xee\xbe+\xa6\x04\xbfb\x01y>\x1c\x00b>\xb0\xd9\xe1\xbe\x19\x05\x1b?C\xb6C\xbe\xcf\x1fg\xbd\x89b\x1b\xbd\x84~]=\xcb\xf2c\xbeQ6\x99=\xcc8\x83>`\x15\x81\xc0@\xbbw>={\xd0\xbf\xc1\x81*\xbe\xf8\x04<\xc1\xad\x02j@YE|A\x88\x17I\xc0z+\x18\xbd\xb5\xd8c?L\x0b\x88>%\xa8\xa6=\xb8l\xd1\xbb\xba]\x8b=\xe2\x8c~?\xf5\x13\xa9\xbe\xdbIw\xbf\xf4\xa3\t?\xea\xe2%?k\xa2\x85>\x1f\x196\xbf^\xbd\r?\xa2?q?9\xbc\x05?\xa9"\x01?r\xe1i\xbeQ\x14B?\xf1\xf0\x89?"\xdd9@\xb23O\xc0\x04e\x99@\xa9\xfdX@\xc9\xd3G\xc0#\x130\xc144\xed\xbf8%a?M\n\x12@~\xa4b\xbd>U\x07\xbf\xa6\x93\xd3=-\xab\x9b=U\xd14?3?3\xbf\xd7\xf5\x91\xbd\xf5\x16\x8c>\x16y\xe1\xbe\xf15\x05\xbf/ `?\x92M!\xbf_\x80\x90>y \x16>\xb7\xe6\xda\xbe\x009\x98>\x1aJ\x93\xbe1\xcc]<\x8e\x9e5?\x7f\xfe\xf5>\xc6\xc6\x96??$2AF\xde\xbd\xc0\xc8Li\xc0q\xc1\x00@\x04i\x15\xc0\xf2)\xeb\xc0\x9d\xb0\x1b\xc1\xf98\xe3@\xdc\x9e\xa1?\x00\xca\xde?\x0f\xf6\xbb=\xc4\xab\x1f\xbb\x01\x0c\xcf={+~\xbfY\xdb\x81\xbdo1\xc6;\x06\x8bD>Q_\x97=;+=\xbf\xd7\x94\xb4=\x9c\x1b\x93?\xb2\x8f\xd3>0}\xaf\xbe\r$G<\xd6\xfa\xce>\xe83$\xbce$6@I^\x8a>\xbdi\x87\xbe\x9e/\xf3\xc0\xee\xe1\x8f\xbf\xefE:\xc0\x07?\xc1@N\x15\xe1?\x1b/w?\xdbuFAys\xc5@\x94t\x94b.""")


def test_walker():
    np.random.seed(0)
    cfg = {"N": 12, "vis": True}
    env = WalkerEnv(cfg)
    time = 512
    s = env.vector_reset()
    for i in range(time):
        actions = np.random.rand(cfg['N'], 8) * 4 - 2  # random actions sampled from [-1, 1]
        s, r = env.vector_step(actions)
    env.close()
    assert np.allclose(np.array(s), GT, atol=1e-4), "Walker env test produced wrong results"


if __name__ == '__main__':
    assert test_walker(), "Walker test failed"
